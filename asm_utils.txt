; search min/max

; ============== BUBBLESORT =============

; NOTE: ASCENDING ORDER UNSIGNED VALUES!

extern uint32_t* bubblesort(uint32_t VETT[], uint8_t lenght);

example usage: 	uint32_t* res = bubblesort(VEC, sizeof(VEC)/sizeof(VEC[0]));

; =======================================

bubblesort		proc
                export  bubblesort
				
				push {r4-r8, r10-r11, lr} ; save volatile registers
				
				; r0 = VETT base address
				; r1 = VETT length
				
				; NOTE: code for array of uint32_t
				; change to H or B for uint16_t and uint8_t and increments 4, 2 or 1

				subs r1, #1
				bls exit
outer_loop
                ; r4 = array pointer (reset for each outer iteration)
                mov r4, r0
                ; r2 = swap flag = 0
                mov r2, #0
                ; r3 = inner loop index = 0
                mov r3, #0

inner_loop
                ; r5 = VETT[i]
                LDR r5, [r4]
                ; r6 = VETT[i+1]
                LDR r6, [r4, #4]

                cmp r5, r6
                ; If VETT[i] > VETT[i+1], swap
				MOVHI r7, r5		  ; r7 = VETT[i]
                STRHI r6, [r4]   	  ; VETT[i] = VETT[i+1]
                STRHI r7, [r4, #4]    ; VETT[i+1] = VETT[i]
                MOVHI r2, #1          ; Set swap flag if swap occurs
                
                ; Increment r4 to point to the next pair
                add r4, r4, #4
                
                ; Increment inner loop index
                add r3, r3, #1
                ; Check if inner loop index reaches (length - 1)
                cmp r3, r1
                blt inner_loop        ; Repeat inner loop if not done

                ; Decrease outer loop bound (largest element now sorted)
                sub r1, r1, #1
                ; Check if swap occurred in the current pass
                cmp r2, #0
                bne outer_loop        ; Repeat outer loop if a swap occurred

exit			
				pop {r4-r8, r10-r11, pc}
                endp

				end

; ============== INSERT ORDERED =============

; NOTE: ASCENDING ORDER UNSIGNED VALUES!

extern uint32_t insert_ordered(uint32_t VETT[N], uint32_t lenght, uint32_t new_val);

example usage: uint32_t index = insert_ordered(VETT, VAR, i); i++;

; =======================================

insert_ordered	proc
                export  insert_ordered
				
				push {r4-r8, r10-r11, lr} ; save volatile registers
				
				; r0 = VETT base address
				; r1 = new_value
				; r2 = actual array lenght
				
				; NOTE: code for array of uint32_t
				; change to H or B for uint16_t and uint8_t and increments 4, 2 or 1, shifts by 0, 1 or 2

				mov r4, r2             ; r4 = loop counter
				mov r5, r0             ; r5 = base address of VETT

				; Find insertion position
find_position
				cmp r4, #0
				beq insert_value       	; If length is 0, directly insert the value

				subs r4, r4, #1
				ldr r6, [r5, r4, LSL #2] ; r6 = Load VETT[r4]
				cmp r6, r1
				bgt find_position      	 ; If VETT[r4] > new_val, keep searching

				; increment to insert in next pos
				add r4, r4, #1

insert_value
				mov r6, r2             ; r6 = current array length
				cmp r4, r6             ; if inserting at the end
				beq append_value

				; Shift elements to make room for new_val
				mov r7, r6             ; r7 = index to shift
shift_loop
				sub r7, r7, #1
				ldr r8, [r5, r7, LSL #2] 	; Load VETT[r7]
				add r7, r7, #1
				str r8, [r5, r7, LSL #2] 	; Store at VETT[r7 + 1]
				sub r7, r7, #1
				cmp r7, r4
				bne shift_loop

append_value
				str r1, [r5, r4, LSL #2] ; Insert new_val at VETT[r4]

				;r0 = position of inserted val
				mov r0, r4
		
				pop {r4-r8, r10-r11, pc}
                endp

				end
	
; ============= CONTAINS VAL ==========

extern uint32_t contains(uint32_t VETT[N], uint32_t lenght, uint32_t val);

example usage: unsigned char found = contains(VETT, N, VAR);

; =====================================

; convenient register renaming
array RN 0
array_length RN 1
value_to_find RN 2
name3 RN 3
;---
found_flag RN 4
element_value RN 5
current_index RN 6
name7 RN 7
name8 RN 8
name9 RN 9

contains		proc
                export contains
				
				; r0 VETT[N]
				; r1 N
				; r2 value to find
				
				; returns:
				; r0: 1 if item found, 0 if not found
				
				push {r4-r8, r10-r11, lr} ; save volatile registers
				
				mov found_flag, #0
				
				cmp array_length, #0
				beq exit
				
				mov element_value, #0
				mov current_index, #0
loop			ldr element_value, [array, current_index, LSL #2]		; load first vett val (NB: arm registers 0x00000000, 4 byte)
				;ldrb element_value, [array, current_index]				; if VETT is an array of char (bytes)
				;ldrh element_value, [array, current_index, LSL #1]		;  - change ldr -> ldrb, remove LSL #2 (aka *4)
																		; if VETT is an array of int16
																		;  - change ldr -> ldrh, LSL #2 -> LSL#1 (aka *2)
				cmp element_value, value_to_find
				moveq found_flag, #1
				beq exit

				; logic here
				
				add current_index, current_index, #1					
				cmp current_index, array_length							; exit condition
				blt loop
				
exit			; put return value into r0
				mov r0, found_flag
				
				pop {r4-r8, r10-r11, pc}
                endp

				end

; ============= FIND MAX/MIN ==========

; return -1 if empy array
extern int32_t get_max(uint32_t VETT[], uint32_t lenght);

example usage: int32_t max = get_max(VETT, N);

; =====================================

get_max	proc
                export  get_max
				
				push {r4-r8, r10-r11, lr} ; save volatile registers
				
				; r0 = VETT base address
				; r1 = array lenght
				
				; NOTE: code for array of uint32_t
				; change to H or B for uint16_t and uint8_t and increments 4, 2 or 1, shifts by 0, 1 or 2
				
				mov r2, #-1

				cmp r1, #0                ; Compare length with 0
				beq return_zero           ; If length is 0, return -1

				ldr r2, [r0]
				add r0, r0, #4
				sub r1, r1, #1

loop
				ldr r3, [r0]
				cmp r3, r2
				ble skip_update           ; If current element <= max_value, skip
				mov r2, r3                ; Update max_value to current element

skip_update
				add r0, r0, #4
				subs r1, r1, #1
				bne loop

return_zero
				mov r0, r2
		
				pop {r4-r8, r10-r11, pc}
                endp

				end
